using System;

namespace Constructor
{
    class Program
    {
        static void Main(string[] args)
        {
            Person Maria = new Person();
            Console.WriteLine();
            Person Ivan = new Person("Иван", 27, "Генеральный директор");
        }
    }

    // Итак, конструктор используется просто для сокращения кода, и о боже, как же это удобно.
    // Конструктор класса инициализирует поля, заданные в данном классе.
    class Person // У нас есть класс Person. Предположим, что мы хотим описать двух человек: Марию и Ивана.
    {
        private string name { get;}
        private int age { get;}
        private string job { get;}

        // Используя знания об инкапсуляции и аксессорах get и set, сразу установим ограничения. Собственно, мы ограничили
        // изменение данных полей вне класса. Это просто правило, работать будет и без этого, но выглядит некрасиво.
        

        public Person () // Здесь мы передаём значения для полей, чтобы описать Марию.
        {
            name = "Мария";
            age = 25;
            job = "Медсестра";

            PrintPerson(); // Просто вывод всех данных, описанный в методе ниже.
        }
        public Person (string _name, int _age, string _job) // Здесь мы создаём "фейковые" переменные, чтобы
            // компьютер понимал, какой конструктор ему нужно выбрать для работы.
            // Соответственно, при вызове этого конструктора в скобках следует указать нужные значения, т.е 
            // имя, возраст, профессию, и всё выведется по порядку.
        {
            name = _name;
            age = _age;
            job = _job;

            PrintPerson();
        }

        private void PrintPerson() // Метод для вывода.
        {
            Console.WriteLine("Имя: " + name);
            Console.WriteLine("Возраст: " + age);
            Console.WriteLine("Профессия: " + job);
        }

    }
}
